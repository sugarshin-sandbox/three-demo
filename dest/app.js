(function() {
  window.addEventListener('DOMContentLoaded', function() {
    var AddMesh, addLoop, aspect, camera, colors, directionalLight, far, fov, height, i, meshes, near, renderer, scene, width;
    scene = new THREE.Scene();
    width = window.innerWidth;
    height = window.innerHeight;
    fov = 80;
    aspect = width / height;
    near = 1;
    far = 1000;
    camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
    camera.position.set(0, 0, 50);
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    renderer.setClearColor('#fff');
    renderer.setSize(width, height);
    document.body.appendChild(renderer.domElement);
    directionalLight = new THREE.DirectionalLight('#fff');
    directionalLight.position.set(0, 1, 1);
    scene.add(directionalLight);
    AddMesh = (function() {
      var _extend;

      _extend = function(out) {
        var i, key, val, _i, _ref, _ref1;
        out = out || {};
        for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
          if (!arguments[i]) {
            continue;
          }
          _ref1 = arguments[i];
          for (key in _ref1) {
            val = _ref1[key];
            if (arguments[i].hasOwnProperty(key)) {
              out[key] = arguments[i][key];
            }
          }
        }
        return out;
      };

      AddMesh.defaults = {
        width: 10,
        height: 10,
        depth: 10,
        color: 0xff0000
      };

      AddMesh.scene = scene;

      function AddMesh(options) {
        this.options = _extend({}, AddMesh.defaults, options);
        this.init();
      }

      AddMesh.prototype.init = function() {
        this.geometry = new THREE.BoxGeometry(this.options.width, this.options.height, this.options.depth);
        this.material = new THREE.MeshPhongMaterial({
          color: this.options.color
        });
        this.mesh = new THREE.Mesh(this.geometry, this.material);
        return this;
      };

      AddMesh.prototype.random = function(max, min) {
        return Math.floor(Math.random() * (max - min) + min);
      };

      AddMesh.prototype.add = function() {
        AddMesh.scene.add(this.mesh);
        return this;
      };

      AddMesh.prototype.position = function(max, min) {
        this.mesh.position.set(this.random(max, min), this.random(max, min), this.random(max, min));
        return this;
      };

      AddMesh.prototype.randomRotation = function() {
        var renderLoop;
        (renderLoop = (function(_this) {
          return function() {
            _this.mesh.rotation.set(0, _this.mesh.rotation.y + (_this.random(16, 0) / 100), _this.mesh.rotation.z + (_this.random(20, 0) / 100));
            renderer.render(scene, camera);
            return requestAnimationFrame(renderLoop);
          };
        })(this))();
        return this;
      };

      return AddMesh;

    })();
    colors = ['#23AAA4', '#5AB5B0', '#78BEB2', '#686F89', '#DC5D54', '#DD6664', '#D94142', '#E78E21', '#E9A21F', '#EDB51C'];
    meshes = [];
    i = 0;
    (addLoop = function() {
      return setTimeout(function() {
        meshes[i] = new AddMesh({
          color: colors[Math.floor(Math.random() * colors.length)]
        });
        meshes[i].position(Math.floor(Math.random() * 32), -(Math.floor(Math.random() * 32))).add().randomRotation();
        i++;
        if (i < 17) {
          return addLoop();
        }
      }, 0);
    })();
    return renderer.render(scene, camera);
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,